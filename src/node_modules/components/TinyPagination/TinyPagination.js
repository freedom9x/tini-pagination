import React from 'react'
import './TinyPagination.css'
import PropTypes from 'prop-types';

class TinyPagination extends React.Component {

  renderIndexFromTo(total, pageID, itemPerPage){
    let startIndex = (pageID - 1) * itemPerPage + 1;
    let endIndex = 1;
    if((pageID * itemPerPage) >  total){
      endIndex = total;
    }else{
      endIndex = pageID * itemPerPage;
    }

    return(
      <span>
        {startIndex}-{endIndex} of {total}
      </span>
    );
  }

  renderPreBtn(totalBtns, pageID){
    if(pageID > 1){
      return this.props.renderBtnNumber('PRE');
    }
  }

  renderNextBtn(totalBtns, pageID){
    if(pageID !== totalBtns){
      return this.props.renderBtnNumber('NEXT');
    }
  }

  renderBtnNumbers(totalBtns, pageID){
    let btns = [];
    for(let i = 0; i < totalBtns.length; i++){
      btns.push(this.props.renderBtnNumber(i))
    }
    return btns;
  }
// TODO: implement [1, *,3, 4 , 5, 6, 7]
  render() {
    let {total, pageID, itemPerPage} = this.props;
    let totalBtns = parseInt(total / itemPerPage, 0);
    return (
      <div className = 'tiny-pagination-container'>
        <div>
          {this.renderIndexFromTo(total, pageID, itemPerPage)}
        </div>
        <div className = 'btns-number-container'>
          {this.renderPreBtn(totalBtns, pageID)}
          {this.renderBtnNumbers(totalBtns, pageID)}
          {this.renderNextBtn(totalBtns, pageID)}
        </div>
      </div>
    )
  }
}
TinyPagination.propTypes = {
  total: PropTypes.number.isRequired,
  pageID: PropTypes.number.isRequired,
  changePage: PropTypes.func.isRequired,
  itemPerPage: PropTypes.number.isRequired,
  renderBtnNumber: PropTypes.func.isRequired,
  maxBtnNumbers: PropTypes.number.isRequired
};

export default TinyPagination